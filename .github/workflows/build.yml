name: Build and Push Docker Images with Nix Flakes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write
      actions: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Nix 2.31.1
      run: |
        # 安装最新稳定版 Nix 2.31.1 (单用户模式)
        sh <(curl -L https://nixos.org/nix/install) --no-daemon --yes
        # 重新加载环境
        . /home/runner/.nix-profile/etc/profile.d/nix.sh
        # 验证安装
        nix --version

    - name: Configure Nix
      run: |
        # 加载 Nix 环境
        . /home/runner/.nix-profile/etc/profile.d/nix.sh
        # 配置 Nix 以支持 Flakes
        mkdir -p ~/.config/nix
        cat > ~/.config/nix/nix.conf << EOF
        experimental-features = nix-command flakes
        allow-import-from-derivation = true
        EOF
        # 验证配置
        nix --version

    - name: Build Docker image with Nix Flakes
      run: |
        # 加载 Nix 环境
        . /home/runner/.nix-profile/etc/profile.d/nix.sh
        # 设置环境变量以允许非自由包（Gurobi）
        export NIXPKGS_ALLOW_UNFREE=1
        # 使用 nix flake 构建，利用 flake.nix 中定义的环境
        # 启用缓存以提高构建速度
        nix build .#docker-image --option sandbox false --impure

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event.inputs.push_images != 'false'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Load Docker image
      run: |
        # 使用 nix build 的结果加载 Docker 镜像
        docker load < result


    - name: Tag Docker image
      if: github.event.inputs.push_images != 'false'
      run: |
        # Get the image ID from the loaded image
        IMAGE_ID=$(docker images --format "{{.ID}}" | head -1)
        echo "Image ID: $IMAGE_ID"
        
        # Create tags array to avoid shell parsing issues
        TAGS=(
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-$(date +%Y%m%d-%H%M%S)"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-${{ github.sha }}"
        )
        
        # Tag with all tags
        for tag in "${TAGS[@]}"; do
          echo "Tagging with: $tag"
          docker tag "$IMAGE_ID" "$tag"
        done
        
        echo "All tags created successfully"

    - name: Push Docker image
      if: github.event.inputs.push_images != 'false'
      run: |
        # Create tags array (same as tagging step)
        TAGS=(
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-$(date +%Y%m%d-%H%M%S)"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-${{ github.sha }}"
        )
        
        # Push all tags
        for tag in "${TAGS[@]}"; do
          echo "Pushing: $tag"
          docker push "$tag"
        done
        
        echo "All tags pushed successfully"

    - name: Run security scan
      if: github.event.inputs.push_images != 'false'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      if: github.event.inputs.push_images != 'false' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Display security scan results (fallback)
      if: github.event.inputs.push_images != 'false' && always()
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ Security scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "📊 Scan results saved to trivy-results.sarif" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security scan results not available" >> $GITHUB_STEP_SUMMARY
        fi

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.push_images != 'false'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image for testing
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest

    - name: Check Docker image
      run: |
        echo "Checking Docker image..."
        docker images | grep ${{ env.IMAGE_NAME }}
        echo "Image size:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep ${{ env.IMAGE_NAME }}
        echo "Image details:"
        docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest | jq '.[0].Config'
        
        # 检查镜像的基本信息
        echo "Image architecture: $(docker inspect --format='{{.Architecture}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image OS: $(docker inspect --format='{{.Os}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image created: $(docker inspect --format='{{.Created}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image working dir: $(docker inspect --format='{{.Config.WorkingDir}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image user: $(docker inspect --format='{{.Config.User}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"

    - name: Test Docker image configuration
      run: |
        echo "Testing Docker image configuration..."
        echo "✅ Image successfully pulled and available"
        echo "✅ Image size: $(docker images --format '{{.Size}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "✅ Image created: $(docker inspect --format='{{.Created}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "✅ Image architecture: $(docker inspect --format='{{.Architecture}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "✅ Image OS: $(docker inspect --format='{{.Os}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image entrypoint: $(docker inspect --format='{{.Config.Entrypoint}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image cmd: $(docker inspect --format='{{.Config.Cmd}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Image working dir: $(docker inspect --format='{{.Config.WorkingDir}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"

    - name: Test basic container functionality
      run: |
        echo "Testing basic container functionality..."
        # Test if we can create a container (without running it)
        CONTAINER_ID=$(docker create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest echo "test")
        if [ $? -eq 0 ]; then
          echo "✅ Container creation successful"
          docker rm $CONTAINER_ID
        else
          echo "❌ Container creation failed"
          exit 1
        fi

    - name: Test Python installation (inspect)
      run: |
        echo "Testing Python installation via image inspection..."
        
        # 检查容器的默认命令是否能工作
        echo "Testing container default command:"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest 2>&1 || echo "Default command test completed"
        
        # 检查环境变量
        echo "Checking environment variables:"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest env | grep -E "(PATH|PYTHON)" || echo "No Python environment variables found"
        
        # 查找 Python 可执行文件
        echo "Searching for Python executables:"
        PYTHON_EXECS=$(docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "python*" -type f -executable 2>/dev/null | head -5)
        echo "Found Python executables: $PYTHON_EXECS"
        
        # 测试找到的 Python 可执行文件
        if [ -n "$PYTHON_EXECS" ]; then
          for python_exec in $PYTHON_EXECS; do
            echo "Testing $python_exec:"
            docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest $python_exec --version 2>&1 || echo "Failed to run $python_exec"
          done
        else
          echo "No Python executables found"
        fi
        
        echo "✅ Python installation check completed"

    - name: Test UV installation (inspect)
      run: |
        echo "Testing UV installation via image inspection..."
        
        # 查找 UV 可执行文件
        echo "Searching for UV executables:"
        UV_EXECS=$(docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "uv" -type f -executable 2>/dev/null)
        echo "Found UV executables: $UV_EXECS"
        
        # 测试找到的 UV 可执行文件
        if [ -n "$UV_EXECS" ]; then
          for uv_exec in $UV_EXECS; do
            echo "Testing $uv_exec:"
            docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest $uv_exec --version 2>&1 || echo "Failed to run $uv_exec"
          done
        else
          echo "No UV executables found"
        fi
        
        echo "✅ UV installation check completed"

    - name: Find Python executable
      run: |
        echo "Finding Python executable in the image..."
        # Find all Python executables
        PYTHON_PATHS=$(docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "python*" -type f -executable 2>/dev/null | head -5)
        echo "Found Python executables:"
        echo "$PYTHON_PATHS"
        
        # Try to find a working Python
        for python_path in $PYTHON_PATHS; do
          echo "Testing $python_path:"
          docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest $python_path --version 2>&1 || echo "Failed to run $python_path"
        done

    - name: Test package availability (inspect)
      run: |
        echo "Testing package availability via image inspection..."
        
        # 测试容器的默认命令
        echo "Testing container default command:"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest 2>&1 || echo "Default command test completed"
        
        # 查找可用的 Python 可执行文件
        echo "Finding Python executables for package testing:"
        PYTHON_EXECUTABLES=$(docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "python*" -type f -executable 2>/dev/null | head -3)
        echo "Found Python executables: $PYTHON_EXECUTABLES"
        
        if [ -n "$PYTHON_EXECUTABLES" ]; then
          for python_cmd in $PYTHON_EXECUTABLES; do
            echo "Testing packages with $python_cmd:"
            docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest $python_cmd -c "
            try:
                import numpy
                print('✅ NumPy available')
            except ImportError as e:
                print(f'❌ NumPy not available: {e}')
            
            try:
                import gurobipy
                print('✅ Gurobi available')
            except ImportError as e:
                print(f'❌ Gurobi not available: {e}')
            " 2>&1 || echo "Package check failed with $python_cmd"
          done
        else
          echo "❌ No Python executables found for package testing"
        fi
        
        echo "✅ Package availability check completed"

    - name: Test Gurobi specifically
      run: |
        echo "Testing Gurobi specifically..."
        
        # 检查 Gurobi 环境变量
        echo "Checking Gurobi environment variables:"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest env | grep -i gurobi || echo "No Gurobi environment variables found"
        
        # 检查 Gurobi 安装
        echo "Checking Gurobi installation:"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "*gurobi*" -type d 2>/dev/null | head -5 || echo "No Gurobi directories found"
        
        # 查找可用的 Python 可执行文件
        echo "Finding Python executable for Gurobi test:"
        PYTHON_EXEC=$(docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest find / -name "python*" -type f -executable 2>/dev/null | head -1)
        
        if [ -n "$PYTHON_EXEC" ]; then
          echo "Using Python executable: $PYTHON_EXEC"
          
          # 测试 Gurobi Python 包
          echo "Testing Gurobi Python package:"
          docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest $PYTHON_EXEC -c "
          try:
              import gurobipy as gp
              print('✅ Gurobi Python package imported successfully')
              print(f'✅ Gurobi version: {gp.gurobi.version()}')
              
              # Test basic Gurobi functionality
              try:
                  model = gp.Model('test')
                  print('✅ Gurobi model creation successful')
                  model.dispose()
              except Exception as e:
                  print(f'⚠️ Gurobi model creation failed (expected without license): {e}')
                  
          except ImportError as e:
              print(f'❌ Gurobi Python package not available: {e}')
          except Exception as e:
              print(f'⚠️ Gurobi error: {e}')
          " 2>&1 || echo "Gurobi test failed"
        else
          echo "❌ No Python executable found for Gurobi test"
        fi
        
        echo "✅ Gurobi test completed"

    - name: Comprehensive image validation
      run: |
        echo "Running comprehensive image validation..."
        
        # 测试镜像的基本可用性
        echo "1. Testing basic image availability:"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest echo "✅ Image is runnable" || echo "❌ Image failed to run"
        
        # 测试环境变量
        echo "2. Testing environment variables:"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest env | grep -E "(PYTHON|GUROBI|PATH)" || echo "No relevant environment variables found"
        
        # 测试文件系统结构
        echo "3. Testing filesystem structure:"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest ls -la /app || echo "No /app directory"
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest ls -la /home || echo "No /home directory"
        
        # 测试安全配置
        echo "4. Testing security configuration:"
        echo "User: $(docker inspect --format='{{.Config.User}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "ReadOnlyRootfs: $(docker inspect --format='{{.Config.ReadOnlyRootfs}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        echo "Privileged: $(docker inspect --format='{{.Config.Privileged}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure-latest)"
        
        echo "✅ Comprehensive validation completed"

  generate-summary:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()

    steps:
    - name: Generate summary
      run: |
        echo "## 🐳 Docker Image Build Summary (Nix Flakes)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`secure-latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build System:**" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Nix Flakes for reproducible builds" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Declarative environment management" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Features:**" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secure Python 3.12 environment" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ UV package manager" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Gurobi optimization solver" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Scientific computing packages" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Non-root user execution" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Resource limits and security restrictions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** [GitHub Container Registry](https://github.com/orgs/reaslab/packages)" >> $GITHUB_STEP_SUMMARY
